/*
 * Hydrogen
 * Copyright(c) 2015 by Sacha Delanoue
 *
 * http://www.hydrogen-music.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#include <hydrogen/lilypond/lilypond.h>
#include <hydrogen/basics/song.h>
#include <hydrogen/basics/pattern_list.h>
#include <hydrogen/basics/pattern.h>

#include <fstream>

/*
 * Header of LilyPond file
 * It contains the notation style (states the position of notes), and for this
 * it follows the "Guide to Standardized Drumset Notation" by Norman Weinberg.
 *
 * Note that the GM-kit uses two unconventionnal intruments: "Stick" and
 * "Hand Clap", so for those I did what I could and used the recommended
 * triangle notehead to distinguish them for drum and cymbal notation.
 */
static const char *sHeader =
        "\\version \"2.16.2\"\n" // Current version on Ubuntu LTS
        "\n"
        "#(define gmStyle\n"
        "    '(\n"
        "     (bassdrum       default   #f          -3) ; Kick\n"
        "     (lowoodblock    triangle  #f          0)  ; Stick\n"
        "     (snare          default   #f          1)  ; Snare\n"
        "     (maracas        triangle  #f          -3) ; Hand Clap\n"
        "     (highfloortom   default   #f          -1) ; Tom Low\n"
        "     (hihat          cross     #f          5)  ; Closed HH\n"
        "     (lowtom         default   #f          2)  ; Tom Mid\n"
        "     (pedalhihat     cross     #f          -5) ; Pedal HH\n"
        "     (hightom        default   #f          3)  ; Tom Hi\n"
        "     (openhihat      cross     \"open\"      5)  ; Open HH\n"
        "     (cowbell        triangle  #f          3)  ; Cowbell\n"
        "     (ridecymbal     cross     #f          4)  ; Main Ride\n"
        "     (crashcymbal    cross     #f          6)  ; Main Crash\n"
        "     (ridecymbala    cross     #f          4)  ; Additional Ride\n"
        "     (crashcymbala   cross     #f          7)  ; Additional Crash\n"
        "     ))\n"
        "\n";

H2Core::LilyPond::LilyPond() {
}

void H2Core::LilyPond::extractData( const Song &song ) {
	// Retreive metadata
	m_sName = song.__name;
	m_sAuthor = song.__author;
	m_fBPM = song.__bpm;

	// Get the main information about the music
	const std::vector<PatternList *> *group = song.get_pattern_group_vector();
	if ( !group ) {
		m_measures.clear();
		return;
	}
	unsigned nSize = group->size();
	m_measures = std::vector<notes_t>( nSize );
	for ( unsigned nPatternList = 0; nPatternList < nSize; nPatternList++ ) {
		if ( PatternList *pPatternList = ( *group )[ nPatternList ] ) {
			addPatternList( *pPatternList, m_measures[ nPatternList ] );
		}
	}
}

void H2Core::LilyPond::write( const QString &sFilename ) const {
	std::ofstream file( sFilename.toLocal8Bit() );
	if ( !file ) {
		return;
	}

	file << sHeader;
	file << "\\header {\n";
	file << "    title = \"" << m_sName.toUtf8().constData() << "\"\n";
	file << "    composer = \"" << m_sAuthor.toUtf8().constData() << "\"\n";
	file << "    tagline = \"Generated by Hydrogen " H2CORE_VERSION "\"\n";
	file << "}\n\n";

	file << "\\score {\n";
	file << "    \\new DrumStaff <<\n";
	file << "        \\set DrumStaff.drumStyleTable = #(alist->hash-table "
	        "gmStyle)\n";
	file << "        \\override Staff.TimeSignature #'style = #'() % Display "
	        "4/4 signature\n";
	file << "        \\set Staff.beamExceptions = #'()             % Beam "
	        "quavers two by two\n";
	file << "        \\drummode {\n";
	file << "            \\tempo 4 = " << static_cast<int>( m_fBPM ) << "\n\n";
	file << "\n        }\n";
	file << "    >>\n";
	file << "}\n";
}

void H2Core::LilyPond::addPatternList( const PatternList &list, notes_t &to ) {
	to.clear();
	for ( unsigned nPattern = 0; nPattern < list.size(); nPattern++ ) {
		if ( const Pattern *pPattern = list.get( nPattern ) ) {
			addPattern( *pPattern, to );
		}
	}
}

void H2Core::LilyPond::addPattern( const Pattern &pattern, notes_t &notes ) {
	notes.reserve( pattern.get_length() );
	for ( unsigned nNote = 0; nNote < pattern.get_length(); nNote++ ) {
		if ( nNote >= notes.size() ) {
			notes.push_back( std::vector<std::pair<int, float> >() );
		}

		const Pattern::notes_t *pPatternNotes = pattern.get_notes();
		if ( !pPatternNotes ) {
			continue;
		}
		FOREACH_NOTE_CST_IT_BOUND( pPatternNotes, it, nNote ) {
			if ( Note *pNote = it->second ) {
				int nId = pNote->get_instrument_id();
				float fVelocity = pNote->get_velocity();
				notes[ nNote ].push_back( std::make_pair( nId, fVelocity ) );
			}
		}
	}
}
